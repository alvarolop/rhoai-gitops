---
apiVersion: kubeflow.org/v1
kind: Notebook
metadata:
  annotations:
    notebooks.opendatahub.io/inject-oauth: "true"
    notebooks.opendatahub.io/last-image-selection: pytorch:2024.1
    notebooks.opendatahub.io/last-size-selection: Small
    notebooks.opendatahub.io/oauth-logout-url: >-
      $DASHBOARD_ROUTE/projects/{{ .Values.dataScienceProjectNamespace }}?notebookLogout={{ .Values.workbench.name }}
    opendatahub.io/accelerator-name: migrated-gpu
    opendatahub.io/image-display-name: PyTorch
    openshift.io/description: This is an example Workbench using the PyTorch Image and NVIDIA GPUs
    openshift.io/display-name: {{ .Values.workbench.name }}
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
  name: {{ .Values.workbench.name }}
  namespace: {{ .Values.dataScienceProjectNamespace }}
  labels:
    app: {{ .Values.workbench.name }}
    opendatahub.io/dashboard: "true"
    opendatahub.io/odh-managed: "true"
spec:
  template:
    spec:
      affinity: {}
      containers:
      - env:
        - name: NOTEBOOK_ARGS
          value: |-
            --ServerApp.port=8888
            --ServerApp.token=''
            --ServerApp.password=''
            --ServerApp.base_url=/notebook/{{ .Values.dataScienceProjectNamespace }}/{{ .Values.workbench.name }}
            --ServerApp.quit_button=False
            --ServerApp.tornado_settings={"user":"admin","hub_host":"$DASHBOARD_ROUTE","hub_prefix":"/projects/{{ .Values.dataScienceProjectNamespace }}"}
        - name: JUPYTER_IMAGE
          value: image-registry.openshift-image-registry.svc:5000/redhat-ods-applications/{{ .Values.workbench.image }}
        - name: PIP_CERT
          value: /etc/pki/tls/custom-certs/ca-bundle.crt
        - name: REQUESTS_CA_BUNDLE
          value: /etc/pki/tls/custom-certs/ca-bundle.crt
        - name: SSL_CERT_FILE
          value: /etc/pki/tls/custom-certs/ca-bundle.crt
        - name: PIPELINES_SSL_SA_CERTS
          value: /etc/pki/tls/custom-certs/ca-bundle.crt
        - name: GIT_SSL_CAINFO
          value: /etc/pki/tls/custom-certs/ca-bundle.crt
        image: image-registry.openshift-image-registry.svc:5000/redhat-ods-applications/{{ .Values.workbench.image }}
        imagePullPolicy: Always
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /notebook/{{ .Values.dataScienceProjectNamespace }}/{{ .Values.workbench.name }}/api
            port: notebook-port
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 1
        name: {{ .Values.workbench.name }}
        ports:
        - containerPort: 8888
          name: notebook-port
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /notebook/{{ .Values.dataScienceProjectNamespace }}/{{ .Values.workbench.name }}/api
            port: notebook-port
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 1
        resources:
          limits:
            cpu: '{{ .Values.workbench.resources.limits.cpu }}'
            memory: {{ .Values.workbench.resources.limits.memory }}
            {{- if .Values.workbench.resources.limits.nvidiaGpu }}
            nvidia.com/gpu: '{{ .Values.workbench.resources.requests.nvidiaGpu }}'
            {{- end }}
          requests:
            cpu: '{{ .Values.workbench.resources.requests.cpu }}'
            memory: {{ .Values.workbench.resources.requests.memory }}
            {{- if .Values.workbench.resources.requests.nvidiaGpu }}
            nvidia.com/gpu: '{{ .Values.workbench.resources.requests.nvidiaGpu }}'
            {{- end }}
        volumeMounts:
        - mountPath: /opt/app-root/src
          name: {{ .Values.workbench.name }}
        - mountPath: /opt/app-root/runtimes
          name: elyra-dsp-details
        - mountPath: /dev/shm
          name: shm
        - mountPath: /etc/pki/tls/custom-certs/ca-bundle.crt
          name: trusted-ca
          readOnly: true
          subPath: ca-bundle.crt
        workingDir: /opt/app-root/src
      - args:
        - '--provider=openshift'
        - '--https-address=:8443'
        - '--http-address='
        - '--openshift-service-account={{ .Values.workbench.name }}'
        - '--cookie-secret-file=/etc/oauth/config/cookie_secret'
        - '--cookie-expire=24h0m0s'
        - '--tls-cert=/etc/tls/private/tls.crt'
        - '--tls-key=/etc/tls/private/tls.key'
        - '--upstream=http://localhost:8888'
        - '--upstream-ca=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt'
        - '--email-domain=*'
        - '--skip-provider-button'
        - >-
          --openshift-sar={"verb":"get","resource":"notebooks","resourceAPIGroup":"kubeflow.org","resourceName":"{{ .Values.workbench.name }}","namespace":"$(NAMESPACE)"}
        - >-
          --logout-url=$DASHBOARD_ROUTE/projects/{{ .Values.dataScienceProjectNamespace }}?notebookLogout={{ .Values.workbench.name }}
        env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: registry.redhat.io/openshift4/ose-oauth-proxy@sha256:4bef31eb993feb6f1096b51b4876c65a6fb1f4401fee97fa4f4542b6b7c9bc46
        imagePullPolicy: Always
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /oauth/healthz
            port: oauth-proxy
            scheme: HTTPS
          initialDelaySeconds: 30
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 1
        name: oauth-proxy
        ports:
        - containerPort: 8443
          name: oauth-proxy
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /oauth/healthz
            port: oauth-proxy
            scheme: HTTPS
          initialDelaySeconds: 5
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 1
        resources:
          limits:
            cpu: 100m
            memory: 64Mi
          requests:
            cpu: 100m
            memory: 64Mi
        volumeMounts:
        - mountPath: /etc/oauth/config
          name: oauth-config
        - mountPath: /etc/tls/private
          name: tls-certificates
      enableServiceLinks: false
      serviceAccountName: {{ .Values.workbench.name }}
      {{- if or .Values.workbench.resources.requests.nvidiaGpu .Values.workbench.resources.limits.nvidiaGpu }}
      tolerations:
        - effect: NoSchedule
          key: nvidia.com/gpu
          operator: Exists
      {{- end }}
      volumes:
      - name: {{ .Values.workbench.name }}
        persistentVolumeClaim:
          claimName: {{ .Values.workbench.name }}
      - name: elyra-dsp-details
        secret:
          secretName: ds-pipeline-config
      - emptyDir:
          medium: Memory
        name: shm
      - configMap:
          items:
          - key: ca-bundle.crt
            path: ca-bundle.crt
          name: workbench-trusted-ca-bundle
          optional: true
        name: trusted-ca
      - name: oauth-config
        secret:
          defaultMode: 420
          secretName: {{ .Values.workbench.name }}-oauth-config
      - name: tls-certificates
        secret:
          defaultMode: 420
          secretName: {{ .Values.workbench.name }}-tls
